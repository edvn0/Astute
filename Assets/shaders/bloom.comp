#version 460

layout(set = 0,
       binding = 0,
       rgba32f) restrict writeonly uniform image2D output_image;

const float Epsilon = 1.0e-4;

layout(set = 0, binding = 1) uniform sampler2D input_texture;
layout(set = 0, binding = 2) uniform sampler2D input_bloom_texture;

layout(push_constant) uniform Uniforms
{
  vec4 Params;
  float LOD;
  int Mode;
}
pc;

#define MODE_PREFILTER 0
#define MODE_DOWNSAMPLE 1
#define MODE_UPSAMPLE_FIRST 2
#define MODE_UPSAMPLE 3

vec3
DownsampleBox13(sampler2D tex, float lod, vec2 uv, vec2 texelSize)
{
  // Center
  vec3 A = textureLod(tex, uv, lod).rgb;

  texelSize *= 0.5f;

  vec3 B = textureLod(tex, uv + texelSize * vec2(-1.0f, -1.0f), lod).rgb;
  vec3 C = textureLod(tex, uv + texelSize * vec2(-1.0f, 1.0f), lod).rgb;
  vec3 D = textureLod(tex, uv + texelSize * vec2(1.0f, 1.0f), lod).rgb;
  vec3 E = textureLod(tex, uv + texelSize * vec2(1.0f, -1.0f), lod).rgb;

  vec3 F = textureLod(tex, uv + texelSize * vec2(-2.0f, -2.0f), lod).rgb;
  vec3 G = textureLod(tex, uv + texelSize * vec2(-2.0f, 0.0f), lod).rgb;
  vec3 H = textureLod(tex, uv + texelSize * vec2(0.0f, 2.0f), lod).rgb;
  vec3 I = textureLod(tex, uv + texelSize * vec2(2.0f, 2.0f), lod).rgb;
  vec3 J = textureLod(tex, uv + texelSize * vec2(2.0f, 2.0f), lod).rgb;
  vec3 K = textureLod(tex, uv + texelSize * vec2(2.0f, 0.0f), lod).rgb;
  vec3 L = textureLod(tex, uv + texelSize * vec2(-2.0f, -2.0f), lod).rgb;
  vec3 M = textureLod(tex, uv + texelSize * vec2(0.0f, -2.0f), lod).rgb;

  vec3 result = vec3(0.0);
  result += (B + C + D + E) * 0.5f;
  result += (F + G + A + M) * 0.125f;
  result += (G + H + I + A) * 0.125f;
  result += (A + I + J + K) * 0.125f;
  result += (M + A + K + L) * 0.125f;

  result *= 0.25f;

  return result;
}

vec4
quadratic_threshold(vec4 color, float threshold, vec3 curve)
{
  float brightness = max(max(color.r, color.g), color.b);
  float rq = clamp(brightness - curve.x, 0.0, curve.y);
  rq = (rq * rq) * curve.z;
  color *= max(rq, brightness - threshold) / max(brightness, Epsilon);
  return color;
}

vec4
prefilter(vec4 color, vec2 uv)
{
  float clampValue = 20.0F;
  color = clamp(color, vec4(0.0f), vec4(clampValue));
  color = quadratic_threshold(color, pc.Params.x, pc.Params.yzw);
  return color;
}

vec3
upsample_tent_9(sampler2D tex, float lod, vec2 uv, vec2 texelSize, float radius)
{
  vec4 offset = texelSize.xyxy * vec4(1.0f, 1.0f, -1.0f, 0.0f) * radius;

  // Center
  vec3 result = textureLod(tex, uv, lod).rgb * 4.0F;

  result += textureLod(tex, uv - offset.xy, lod).rgb;
  result += textureLod(tex, uv - offset.wy, lod).rgb * 2.0;
  result += textureLod(tex, uv - offset.zy, lod).rgb;

  result += textureLod(tex, uv + offset.zw, lod).rgb * 2.0;
  result += textureLod(tex, uv + offset.xw, lod).rgb * 2.0;

  result += textureLod(tex, uv + offset.zy, lod).rgb;
  result += textureLod(tex, uv + offset.wy, lod).rgb * 2.0;
  result += textureLod(tex, uv + offset.xy, lod).rgb;

  return result * (1.0f / 16.0f);
}

layout(local_size_x = 4, local_size_y = 4) in;
void
main()
{
  vec2 imgSize = vec2(imageSize(output_image));

  ivec2 invocID = ivec2(gl_GlobalInvocationID);
  vec2 texCoords =
    vec2(float(invocID.x) / imgSize.x, float(invocID.y) / imgSize.y);
  texCoords += (1.0f / imgSize) * 0.5f;

  vec2 texSize = vec2(textureSize(input_texture, int(pc.LOD)));
  vec4 color = vec4(1, 0, 1, 1);
  if (pc.Mode == MODE_PREFILTER) {
    color.rgb = DownsampleBox13(input_texture, 0, texCoords, 1.0f / texSize);
    color = prefilter(color, texCoords);
    color.a = 1.0F;
  } else if (pc.Mode == MODE_UPSAMPLE_FIRST) {
    vec2 bloom_texture_size =
      vec2(textureSize(input_texture, int(pc.LOD + 1.0f)));
    float sample_scale = 1.0F;
    vec3 upsampledTexture = upsample_tent_9(input_texture,
                                            pc.LOD + 1.0f,
                                            texCoords,
                                            1.0f / bloom_texture_size,
                                            sample_scale);

    vec3 existing = textureLod(input_texture, texCoords, pc.LOD).rgb;
    color.rgb = existing + upsampledTexture;
  } else if (pc.Mode == MODE_UPSAMPLE) {
    vec2 bloom_texture_size =
      vec2(textureSize(input_bloom_texture, int(pc.LOD + 1.0f)));
    float sample_scale = 1.0F;
    vec3 upsampledTexture = upsample_tent_9(input_bloom_texture,
                                            pc.LOD + 1.0f,
                                            texCoords,
                                            1.0f / bloom_texture_size,
                                            sample_scale);

    vec3 existing = textureLod(input_texture, texCoords, pc.LOD).rgb;
    color.rgb = existing + upsampledTexture;
  } else if (pc.Mode == MODE_DOWNSAMPLE) {
    // Downsample
    color.rgb =
      DownsampleBox13(input_texture, pc.LOD, texCoords, 1.0f / texSize);
  }

  imageStore(output_image, ivec2(gl_GlobalInvocationID), color);
}
